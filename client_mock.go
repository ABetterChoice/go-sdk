// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package abc is a generated GoMock package.
package abc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// GetExperiment mocks base method.
func (m *MockContext) GetExperiment(ctx context.Context, projectID, layerKey string, opts ...ExperimentOption) (*ExperimentResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectID, layerKey}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperiment", varargs...)
	ret0, _ := ret[0].(*ExperimentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperiment indicates an expected call of GetExperiment.
func (mr *MockContextMockRecorder) GetExperiment(ctx, projectID, layerKey interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectID, layerKey}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperiment", reflect.TypeOf((*MockContext)(nil).GetExperiment), varargs...)
}

// GetExperiments mocks base method.
func (m *MockContext) GetExperiments(ctx context.Context, projectID string, opts ...ExperimentOption) (*ExperimentList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperiments", varargs...)
	ret0, _ := ret[0].(*ExperimentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperiments indicates an expected call of GetExperiments.
func (mr *MockContextMockRecorder) GetExperiments(ctx, projectID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperiments", reflect.TypeOf((*MockContext)(nil).GetExperiments), varargs...)
}

// GetFeatureFlag mocks base method.
func (m *MockContext) GetFeatureFlag(ctx context.Context, projectID, key string, opts ...ConfigOption) (*FeatureFlag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectID, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeatureFlag", varargs...)
	ret0, _ := ret[0].(*FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlag indicates an expected call of GetFeatureFlag.
func (mr *MockContextMockRecorder) GetFeatureFlag(ctx, projectID, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectID, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlag", reflect.TypeOf((*MockContext)(nil).GetFeatureFlag), varargs...)
}

// GetRemoteConfig mocks base method.
func (m *MockContext) GetRemoteConfig(ctx context.Context, projectID, key string, opts ...ConfigOption) (*ConfigResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectID, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRemoteConfig", varargs...)
	ret0, _ := ret[0].(*ConfigResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteConfig indicates an expected call of GetRemoteConfig.
func (mr *MockContextMockRecorder) GetRemoteConfig(ctx, projectID, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectID, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteConfig", reflect.TypeOf((*MockContext)(nil).GetRemoteConfig), varargs...)
}

// GetValueByVariantKey mocks base method.
func (m *MockContext) GetValueByVariantKey(ctx context.Context, projectID, key string, opts ...ExperimentOption) (*ValueResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, projectID, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValueByVariantKey", varargs...)
	ret0, _ := ret[0].(*ValueResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValueByVariantKey indicates an expected call of GetValueByVariantKey.
func (mr *MockContextMockRecorder) GetValueByVariantKey(ctx, projectID, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, projectID, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueByVariantKey", reflect.TypeOf((*MockContext)(nil).GetValueByVariantKey), varargs...)
}
